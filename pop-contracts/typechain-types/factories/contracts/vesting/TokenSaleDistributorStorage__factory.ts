/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenSaleDistributorStorage,
  TokenSaleDistributorStorageInterface,
} from "../../../contracts/vesting/TokenSaleDistributorStorage";

const _abi = [
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allocations",
    outputs: [
      {
        internalType: "bool",
        name: "isLinear",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cliff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cliffPercentage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "claimed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "monthlyVestingInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061022c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635c60da1b1161005b5780635c60da1b1461010f57806396e9a3eb146101225780639d76ea581461013a578063f851a4401461014d57600080fd5b8063010bc33c1461008257806326782247146100d1578063396f7b23146100fc575b600080fd5b6100956100903660046101be565b610160565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b6001546100e4906001600160a01b031681565b6040516001600160a01b0390911681526020016100c8565b6003546100e4906001600160a01b031681565b6002546100e4906001600160a01b031681565b61012c622819a081565b6040519081526020016100c8565b6004546100e4906001600160a01b031681565b6000546100e4906001600160a01b031681565b6005602052816000526040600020818154811061017c57600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015460ff90951697509295509093909287565b600080604083850312156101d157600080fd5b82356001600160a01b03811681146101e857600080fd5b94602093909301359350505056fea26469706673582212202adad94537092939d8a3d00d271affe5025a476b6bdb184eecfbe44c7552388964736f6c634300080a0033";

type TokenSaleDistributorStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSaleDistributorStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSaleDistributorStorage__factory extends ContractFactory {
  constructor(...args: TokenSaleDistributorStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenSaleDistributorStorage> {
    return super.deploy(
      overrides || {}
    ) as Promise<TokenSaleDistributorStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenSaleDistributorStorage {
    return super.attach(address) as TokenSaleDistributorStorage;
  }
  override connect(signer: Signer): TokenSaleDistributorStorage__factory {
    return super.connect(signer) as TokenSaleDistributorStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSaleDistributorStorageInterface {
    return new utils.Interface(_abi) as TokenSaleDistributorStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSaleDistributorStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TokenSaleDistributorStorage;
  }
}
